/****************************** Ghost.github.io ******************************\
*	Module Name:	FrmEtelaateAshkhas.cs
*	Project:		EtelaatePaye
*	Copyright (C) 2018 Kamal Khayati, All rights reserved.
*	This software may be modified and distributed under the terms of the MIT license.  See LICENSE file for details.
*
*	Written by Kamal Khayati <Kamal1355@gmail.com>,  2019 / 3 / 10   10:00 ق.ظ
*	
***********************************************************************************/
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using System.Data.Entity;
using DBHesabdari_TG;
using HelpClassLibrary;
using System.Data.Entity.Infrastructure;

namespace EtelaatePaye.CodingHesabdari
{
    public partial class FrmEtelaateAshkhas : DevExpress.XtraEditors.XtraForm
    {
        public FrmEtelaateAshkhas()
        {
            InitializeComponent();
            //// This line of code is generated by Data Source Configuration Wizard
            //// Instantiate a new DBContext
            //DBHesabdari_TG.MyContext dbContext = new DBHesabdari_TG.MyContext();
            //// Call the Load method to get the data for the given DbSet from the database.
            //dbContext.EpMoshakhasat_As.Load();
            //// This line of code is generated by Data Source Configuration Wizard
            //epMoshakhasat_AsBindingSource.DataSource = dbContext.EpMoshakhasat_As.Local.ToBindingList();
            //// This line of code is generated by Data Source Configuration Wizard
            //// Instantiate a new DBContext
            //DBHesabdari_TG.MyContext dbContext = new DBHesabdari_TG.MyContext();
            //// Call the Load method to get the data for the given DbSet from the database.
            //dbContext.EpAdress_As.Load();
            //// This line of code is generated by Data Source Configuration Wizard
            //epAdress_AsBindingSource.DataSource = dbContext.EpAdress_As.Local.ToBindingList();
        }

        public EnumCED En;
        public bool IsActiveList = true;
        public void FillcmbGroupTafzili()
        {
            using (var db = new MyContext())
            {
                try
                {
                    if (db.EpGroupTafzilis.Any())
                    {
                        if (IsActiveList == true)
                        {
                            db.EpGroupTafzilis.Where(s => s.IsActive == true && s.Id == 3 || s.Id == 4).Load();
                            epGroupTafzilisBindingSource.DataSource = db.EpGroupTafzilis.Local.ToBindingList();
                        }
                        else
                        {
                            db.EpGroupTafzilis.Where(s => s.Id == 3 || s.Id == 4).Load();
                            epGroupTafzilisBindingSource.DataSource = db.EpGroupTafzilis.Local.ToBindingList();
                        }
                    }
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
                        "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }

        }
        public void FillcmbTafziliAshkhas()
        {
            using (var db = new MyContext())
            {
                try
                {
                    if (db.EpHesabTafziliAshkhass.Any())
                    {
                        if (IsActiveList == true)
                        {
                            db.EpHesabTafziliAshkhass.Where(s => s.IsActive == true).Load();
                            epHesabTafziliAshkhassBindingSource.DataSource = db.EpHesabTafziliAshkhass.Local.ToBindingList();
                        }
                        else
                        {
                            db.EpHesabTafziliAshkhass.Load();
                            epHesabTafziliAshkhassBindingSource.DataSource = db.EpHesabTafziliAshkhass.Local.ToBindingList();
                        }
                    }
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
                        "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }

        }


        //////////////////////////////////////////////////////////////////////////////////////////////////////

        public void FillDataGridMoshakhasat1()
        {
            using (var dataContext = new MyContext())
            {
                try
                {
                    int AshkhasId = Convert.ToInt32(txtId.Text);
                    var q1 = dataContext.EpMoshakhasat_As.Where(s => s.Id == AshkhasId).OrderBy(s => s.Id).ToList();
                    //if (lblUserId.Text == "1")
                    //{
                    if (q1.Count > 0)
                        epMoshakhasat_AsBindingSource.DataSource = q1;
                    else
                        epMoshakhasat_AsBindingSource.DataSource = null;
                    //}
                    //else
                    //{
                    //    int _UserId = Convert.ToInt32(lblUserId.Text);
                    //    var q2 = dataContext.RmsUserBepAccessLevelCodingHesabdaris.Where(s => s.UserId == _UserId && s.HesabMoinId > 0 && s.IsActive == true).Select(s => s.HesabMoinId).ToList();

                    //    if (q1.Count > 0)
                    //    {
                    //        if (q2.Count > 0)
                    //        {
                    //            q2.ForEach(item2 =>
                    //            {
                    //                q1.Remove(dataContext.EpHesabTafziliAshkhass.FirstOrDefault(s => s.Id == item2));
                    //            });
                    //            EpHesabTafziliAshkhassBindingSource.DataSource = q1;
                    //        }
                    //        else
                    //        {
                    //            EpHesabTafziliAshkhassBindingSource.DataSource = q1;
                    //        }
                    //    }
                    //    else
                    //        EpHesabTafziliAshkhassBindingSource.DataSource = null;
                    //}
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
                        "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }

        }
        //string NameBeforeEdit = "";
        //bool IsActiveBeforeEdit = true;
        private void FrmEtelaateAshkhas_Load(object sender, EventArgs e)
        {
            FillcmbGroupTafzili();
            FillcmbTafziliAshkhas();
            //if (lblUserId.Text == "1")
            //{
            //    chkIsActive.Visible = true;
            //    labelControl6.Visible = true;
            //}
            //labelControl1.Text = "کد صندوق";
            //labelControl2.Text = "نام صندوق";
            //using (var db = new MyContext())
            //{
            //    try
            //    {
            //        int _UserId = Convert.ToInt32(lblUserId.Text);
            //        var q1 = db.RmsUserBmsAccessLevelMenus.Where(s => s.MsUserId == _UserId).ToList();
            //        if (q1.Count() > 0)
            //        {
            //            //btnCreate.Visibility = q1.Any(s => s.MsAccessLevelMenuId == 55010201) ? BarItemVisibility.Never : BarItemVisibility.Always;
            //            //btnEdit.Visibility = q1.Any(s => s.MsAccessLevelMenuId == 55010202) ? BarItemVisibility.Never : BarItemVisibility.Always;
            //            //btnDelete.Visibility = q1.Any(s => s.MsAccessLevelMenuId == 55010203) ? BarItemVisibility.Never : BarItemVisibility.Always;
            //        }
            //    }
            //    catch (Exception ex)
            //    {
            //        XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
            //            "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
            //    }
            //}

        }

        private void btnClose_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private bool TextEditValidation()
        {
            ///////////////// اعتبار سنجی کد ////////////////////////////////////
            //if (string.IsNullOrEmpty(txtNameEkhtesar.Text) && string.IsNullOrEmpty(txtNameEkhtesar.Text) && string.IsNullOrEmpty(txtNoeFaaliat.Text) && string.IsNullOrEmpty(txtShenaseMelli.Text) && string.IsNullOrEmpty(txtCodeEghtesadi.Text) && string.IsNullOrEmpty(txtShomareSabt.Text) && string.IsNullOrEmpty(txtSharhHesab_M.Text))
            //{
            //    XtraMessageBox.Show("لطفا کد حساب را وارد کنید", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //    return false;
            //}
            //else if (Convert.ToInt32(txtCode.Text) == 0 || Convert.ToInt32(txtCode.Text) > 99999)
            //{
            //    XtraMessageBox.Show("کد وارده بایستی عددی بزرگتر از صفر و کمتر از 100000 باشد", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //    txtCode.Focus();
            //    return false;
            //}
            //else
            //{
            //    using (var db = new MyContext())
            //    {
            //        try
            //        {
            //            int _Code = Convert.ToInt32(txtCodeGroupTafzili.Text + txtCode.Text);
            //            if (En == EnumCED.Create)
            //            {
            //                if (db.EpHesabTafziliAshkhass.Any())
            //                {
            //                    var q1 = db.EpHesabTafziliAshkhass.FirstOrDefault(p => p.Code == _Code);
            //                    if (q1 != null)
            //                    {
            //                        XtraMessageBox.Show("این کد قبلاً تعریف شده است", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //                        btnNewCode_Click(null, null);
            //                        return false;
            //                    }
            //                }
            //            }
            //            else if (En == EnumCED.Edit)
            //            {
            //                int RowId = Convert.ToInt32(txtId.Text);
            //                var q1 = db.EpHesabTafziliAshkhass.FirstOrDefault(p => p.Id != RowId && p.Code == _Code);
            //                if (q1 != null)
            //                {
            //                    XtraMessageBox.Show("این کد قبلاً تعریف شده است", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //                    txtCode.Text = CodeBeforeEdit;
            //                    return false;
            //                }
            //            }
            //        }
            //        catch (Exception ex)
            //        {
            //            XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message, "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
            //        }
            //    }
            //}
            ////////////////// اعتبار سنجی تکس باکس و کمبوباکس ها////////////

            if (string.IsNullOrEmpty(txtNameEkhtesar.Text) && string.IsNullOrEmpty(txtNoeFaaliat.Text) && string.IsNullOrEmpty(txtShenaseMelli.Text) && string.IsNullOrEmpty(txtCodeEghtesadi.Text) && string.IsNullOrEmpty(txtShomareSabt.Text) && string.IsNullOrEmpty(txtSharhHesab_M.Text))
            {
                XtraMessageBox.Show("لطفاً حداقل یکی از موارد درخواستی را وارد کنید", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return false;
            }
            else
            {
                using (var db = new MyContext())
                {
                    try
                    {
                        if (En == EnumCED.Create)
                        {
                            if (db.EpMoshakhasat_As.Any())
                            {
                                var q1 = db.EpMoshakhasat_As.FirstOrDefault(p => p.ShenaseMelli == txtShenaseMelli.Text);
                                var q2 = db.EpMoshakhasat_As.FirstOrDefault(p => p.CodeEghtesadi == txtCodeEghtesadi.Text);
                                if (q1 != null)
                                {
                                    XtraMessageBox.Show("این کد/شناسه ملی قبلاً برای شخص دیگری استفاده شده است", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                    return false;
                                }
                                if (q2 != null)
                                {
                                    XtraMessageBox.Show("این کداقتصادی قبلاً برای شخص دیگری استفاده شده است", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                    return false;
                                }
                            }
                        }
                        else if (En == EnumCED.Edit)
                        {
                            int AshkhasId = Convert.ToInt32(txtId.Text);
                            var q1 = db.EpMoshakhasat_As.FirstOrDefault(p => p.Id != AshkhasId && p.ShenaseMelli == txtShenaseMelli.Text);
                            var q2 = db.EpMoshakhasat_As.FirstOrDefault(p => p.Id != AshkhasId && p.CodeEghtesadi == txtCodeEghtesadi.Text);
                            if (q1 != null)
                            {
                                XtraMessageBox.Show("این کد/شناسه ملی قبلاً برای شخص دیگری استفاده شده است", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                //txtName.Text = nameBeforeEdit;
                                return false;
                            }
                            if (q2 != null)
                            {
                                XtraMessageBox.Show("این کداقتصادی قبلاً برای شخص دیگری استفاده شده است", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return false;
                            }

                        }
                    }
                    catch (Exception ex)
                    {
                        XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message, "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
            return true;
        }

        private void FrmEtelaateAshkhas_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2)
            {
                btnCreate_M_Click(sender, null);
            }
            else if (e.KeyCode == Keys.F3 && btnDelete_M.Enabled == true)
            {
                btnDelete_M_Click(sender, null);
            }
            else if (e.KeyCode == Keys.F4 && btnEdit_M.Enabled == true)
            {
                btnEdit_M_Click(sender, null);
            }
            else if (e.KeyCode == Keys.F5 && btnSave_M.Enabled == true)
            {
                btnSave_M_Click(sender, null);
            }
            else if (e.KeyCode == Keys.F6 && btnCancel_M.Enabled == true)
            {
                btnCancel_M_Click(sender, null);
            }
            else if (e.KeyCode == Keys.F7)
            {
                btnDisplyActiveList_Click(sender, null);
            }
            //else if (e.KeyCode == Keys.F8)
            //{
            //    btnDisplyNotActiveList_Click(sender, null);
            //}
            //else if (e.KeyCode == Keys.F9)
            //{
            //    btnSharhHesab_Click(sender, null);
            //}
            //else if (e.KeyCode == Keys.F10)
            //{
            //    btnAdvancedSearch_Click(sender, null);
            //}
            //else if (e.KeyCode == Keys.F11)
            //{
            //    btnPrintPreview_Click(sender, null);
            //}
            //else if (e.KeyCode == Keys.F12 && btnPrint.Enabled == true)
            //{
            //    btnPrint_Click(sender, null);
            //}
            else if (e.KeyCode == Keys.Escape)
            {
                btnClose_Click(sender, null);
            }

        }

        private void btnLast_Click(object sender, EventArgs e)
        {
            gridViewMoshkhasat1.MoveLast();
        }

        private void btnNext_Click(object sender, EventArgs e)
        {
            gridViewMoshkhasat1.MoveNext();

        }

        private void btnPreview_Click(object sender, EventArgs e)
        {
            gridViewMoshkhasat1.MovePrev();

        }

        private void btnFirst_Click(object sender, EventArgs e)
        {
            gridViewMoshkhasat1.MoveFirst();
        }

        public void btnDisplyActiveList_Click(object sender, EventArgs e)
        {
            IsActiveList = true;
            FillDataGridMoshakhasat1();
        }

        private void gridViewMoshkhasat1_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == 13)
            {
                btnEdit_M_Click(null, null);
            }

        }

        private void gridViewMoshkhasat1_CustomUnboundColumnData(object sender, DevExpress.XtraGrid.Views.Base.CustomColumnDataEventArgs e)
        {
            HelpClass1.SetNumberRowsColumnUnboundGirdView(sender, e);
        }

        public void InActiveButtons()
        {
            if (En == EnumCED.Create || En == EnumCED.Edit)
            {
                foreach (SimpleButton item in panelControl6.Controls)
                {
                    item.Enabled = false;
                }
                btnSave_M.Enabled = true;
                btnCancel_M.Enabled = true;
                btnClose.Enabled = true;
            }
        }

        public void ActiveButtons()
        {
            if (En == EnumCED.Create || En == EnumCED.Edit)
            {
                foreach (SimpleButton item in panelControl6.Controls)
                {
                    item.Enabled = true;
                }
                btnCreate_M.Enabled = gridViewMoshkhasat1.RowCount == 0 ? true : false;
                btnSave_M.Enabled = false;
                btnCancel_M.Enabled = false;
            }
        }

        public void ClearControls()
        {
            txtNameEkhtesar.Text = string.Empty;
            txtNoeFaaliat.Text = string.Empty;
            txtShenaseMelli.Text = string.Empty;
            txtCodeEghtesadi.Text = string.Empty;
            txtShomareSabt.Text = string.Empty;
            txtSharhHesab_M.Text = string.Empty;
        }

        public void ActiveControls()
        {
            if (En == EnumCED.Create || En == EnumCED.Edit)
            {
                txtNameEkhtesar.ReadOnly = false;
                txtNoeFaaliat.ReadOnly = false;
                txtShenaseMelli.ReadOnly = false;
                txtCodeEghtesadi.ReadOnly = false;
                txtShomareSabt.ReadOnly = false;
                txtSharhHesab_M.ReadOnly = false;
            }
        }

        public void InActiveControls()
        {
            if (En == EnumCED.Create || En == EnumCED.Edit)
            {
                txtNameEkhtesar.ReadOnly = true;
                txtNoeFaaliat.ReadOnly = true;
                txtShenaseMelli.ReadOnly = true;
                txtCodeEghtesadi.ReadOnly = true;
                txtShomareSabt.ReadOnly = true;
                txtSharhHesab_M.ReadOnly = true;
            }
        }

        private void btnCreate_M_Click(object sender, EventArgs e)
        {
            En = EnumCED.Create;
            InActiveButtons();
            ClearControls();
            ActiveControls();
            txtNameEkhtesar.Focus();
        }

        private void btnDelete_M_Click(object sender, EventArgs e)
        {
            if (gridViewMoshkhasat1.SelectedRowsCount > 0)
            {
                if (XtraMessageBox.Show("آیا ردیف جاری حذف گردد؟", "پیغام حذف", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                {
                    EditRowIndex = gridViewMoshkhasat1.FocusedRowHandle;
                    using (var db = new MyContext())
                    {
                        try
                        {
                            int RowId = Convert.ToInt32(gridViewMoshkhasat1.GetFocusedRowCellValue("Id").ToString());
                            var q = db.EpMoshakhasat_As.FirstOrDefault(p => p.Id == RowId);
                            //var q8 = db.EpAccessLevelCodingHesabdaris.FirstOrDefault(s => s.HesabColId == RowId);
                            if (q != null /*&& q8 != null*/)
                            {
                                db.EpMoshakhasat_As.Remove(q);
                                //db.EpAccessLevelCodingHesabdaris.Remove(q8);
                                /////////////////////////////////////////////////////////////////////////////
                                db.SaveChanges();

                                    btnDisplyActiveList_Click(null, null);
                               // XtraMessageBox.Show("عملیات حذف با موفقیت انجام شد", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information); ;
                                if (gridViewMoshkhasat1.RowCount > 0)
                                    gridViewMoshkhasat1.FocusedRowHandle = EditRowIndex - 1;
                                btnCreate_M.Enabled = gridViewMoshkhasat1.RowCount == 0 ? true : false;

                            }
                            else
                                XtraMessageBox.Show("رکورد جاری در بانک اطلاعاتی موجود نیست", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        catch (DbUpdateException)
                        {
                            XtraMessageBox.Show("عملیات حذف با خطا مواجه شد \n حذف این حساب تفضیلی مقدور نیست \n" +
                                " جهت حذف حساب تفضیلی در ابتدا بایستی زیر مجموعه های این حساب حذف گردد" +
                                "", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        catch (Exception ex)
                        {
                            XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message, "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                }
            }
        }

        public int EditRowIndex = 0;
        private void btnEdit_M_Click(object sender, EventArgs e)
        {
            if (gridViewMoshkhasat1.SelectedRowsCount > 0 && btnEdit_M.Visible == true)
            {
                gridControlMoshkhasat1.Enabled = false;
                EditRowIndex = gridViewMoshkhasat1.FocusedRowHandle;
                En = EnumCED.Edit;
                InActiveButtons();

                txtNameEkhtesar.Text = gridViewMoshkhasat1.GetFocusedRowCellValue("NameEkhtesar").ToString();
                txtNoeFaaliat.Text = gridViewMoshkhasat1.GetFocusedRowCellValue("NoeFaaliat").ToString();
                txtShenaseMelli.Text = gridViewMoshkhasat1.GetFocusedRowCellValue("ShenaseMelli").ToString();
                txtCodeEghtesadi.Text = gridViewMoshkhasat1.GetFocusedRowCellValue("CodeEghtesadi").ToString();
                txtShomareSabt.Text = gridViewMoshkhasat1.GetFocusedRowCellValue("ShomareSabt").ToString();
                txtSharhHesab_M.Text = gridViewMoshkhasat1.GetFocusedRowCellValue("SharhHesab").ToString();

                ActiveControls();
                txtNameEkhtesar.Focus();
            }
        }

        private void btnSave_M_Click(object sender, EventArgs e)
        {
            if (TextEditValidation())
            {
                if (En == EnumCED.Create)
                {
                    using (var db = new MyContext())
                    {
                        try
                        {
                            EpMoshakhasat_A obj = new EpMoshakhasat_A();
                            obj.Id = Convert.ToInt32(txtId.Text);
                            obj.NameEkhtesar = txtNameEkhtesar.Text;
                            obj.NoeFaaliat = txtNoeFaaliat.Text;
                            obj.ShenaseMelli = txtShenaseMelli.Text;
                            obj.CodeEghtesadi = txtCodeEghtesadi.Text;
                            obj.ShomareSabt = txtShomareSabt.Text;
                            obj.SharhHesab = txtSharhHesab_M.Text;

                            db.EpMoshakhasat_As.Add(obj);
                            db.SaveChanges();
                            /////////////////////////////////////////////////////////////////////////////////////
                            //int _Code = Convert.ToInt32(txtCodeGroupTafziliSandogh.Text + txtCode.Text);
                            //var q = db.EpHesabTafziliAshkhass.FirstOrDefault(s => s.Code == _Code);
                            //////////////////////////////////////// اضافه کردن حساب کل به کلاس سطح دسترسی کدینگ حسابداری ////////////////////
                            //EpAccessLevelCodingHesabdari n1 = new EpAccessLevelCodingHesabdari();
                            //n1.KeyId = _Code;
                            //n1.ParentId = Convert.ToInt32(txtGroupCode.Text);
                            //n1.LevelName = txtName.Text;
                            //n1.HesabGroupId = q.GroupId;
                            //n1.HesabColId = q.Id;
                            //n1.IsActive = chkIsActive.Checked;
                            //db.EpAccessLevelCodingHesabdaris.Add(n1);
                            ///////////////////////////////////////////////////////////////////////////////////////
                            //db.SaveChanges();
                                btnDisplyActiveList_Click(null, null);

                            //XtraMessageBox.Show("عملیات ایجاد با موفقیت انجام شد", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information); ;
                            gridViewMoshkhasat1.MoveLast();
                            ActiveButtons();
                            ClearControls();
                            InActiveControls();
                        }
                        catch (Exception ex)
                        {
                            XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message, "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                }
                else if (En == EnumCED.Edit)
                {
                    using (var db = new MyContext())
                    {
                        try
                        {
                            int RowId = Convert.ToInt32(gridViewMoshkhasat1.GetFocusedRowCellValue("Id").ToString());
                            var q = db.EpMoshakhasat_As.FirstOrDefault(p => p.Id == RowId);
                            if (q != null)
                            {
                                q.NameEkhtesar = txtNameEkhtesar.Text;
                                q.NoeFaaliat = txtNoeFaaliat.Text;
                                q.ShenaseMelli = txtShenaseMelli.Text;
                                q.CodeEghtesadi = txtCodeEghtesadi.Text;
                                q.ShomareSabt = txtShomareSabt.Text;
                                q.SharhHesab = txtSharhHesab_M.Text;

                                /////////////////////////////////متد اصلاح کد و نام در لیست حساب معین WillCascadeOnUpdate ///////////////////////

                                /////////////////////////////// WillCascadeOnUpdate : EpHesabMoins /////////////////////////
                                //var q6 = db.EpHesabMoins.Where(s => s.ColId == RowId).ToList();
                                //if (q6.Count > 0)
                                //{
                                //    q6.ForEach(item =>
                                //    {
                                //        if (CodeBeforeEdit != txtCode.Text)
                                //            item.Code = Convert.ToInt32(item.Code.ToString().Substring(0, 2).Replace(item.Code.ToString().Substring(0, 2), _Code.ToString())
                                //                + item.Code.ToString().Substring(2));
                                //        if (NameBeforeEdit != txtName.Text)
                                //            item.ColName = txtName.Text;
                                //        if (IsActiveBeforeEdit != chkIsActive.Checked)
                                //            item.IsActive = chkIsActive.Checked;
                                //    });
                                //}
                                /////////////////////////////////متد اصلاح کد و نام در لیست سطح دسترسی به کدینگ حسابداری  WillCascadeOnUpdate ///////////////////////
                                //var q8 = db.EpAccessLevelCodingHesabdaris.Where(s => s.HesabColId == RowId).ToList();
                                //if (q8.Count > 0)
                                //{
                                //    q8.ForEach(item =>
                                //    {
                                //        if (item.HesabMoinId == 0)
                                //        {
                                //            if (GroupIdBeforeEdit != Convert.ToInt32(cmbListHesabGroup.EditValue) || CodeBeforeEdit != txtCode.Text)
                                //                item.KeyId = Convert.ToInt32(txtGroupCode.Text + txtCode.Text);
                                //            if (GroupIdBeforeEdit != Convert.ToInt32(cmbListHesabGroup.EditValue))
                                //                item.ParentId = Convert.ToInt32(txtGroupCode.Text);
                                //            if (NameBeforeEdit != txtName.Text)
                                //                item.LevelName = txtName.Text;
                                //            if (GroupIdBeforeEdit != Convert.ToInt32(cmbListHesabGroup.EditValue))
                                //                item.HesabGroupId = _GroupId;
                                //            if (IsActiveBeforeEdit != chkIsActive.Checked)
                                //                item.IsActive = chkIsActive.Checked;
                                //        }
                                //        else
                                //        {
                                //            if (GroupIdBeforeEdit != Convert.ToInt32(cmbListHesabGroup.EditValue) || CodeBeforeEdit != txtCode.Text)
                                //                item.KeyId = Convert.ToInt32(item.KeyId.ToString().Substring(0, 2).Replace(item.KeyId.ToString().Substring(0, 2), _Code.ToString())
                                //                + item.KeyId.ToString().Substring(2));
                                //            if (GroupIdBeforeEdit != Convert.ToInt32(cmbListHesabGroup.EditValue) || CodeBeforeEdit != txtCode.Text)
                                //                item.ParentId = Convert.ToInt32(item.ParentId.ToString().Substring(0, 2).Replace(item.ParentId.ToString().Substring(0, 2), _Code.ToString())
                                //                + item.ParentId.ToString().Substring(2));
                                //            if (GroupIdBeforeEdit != Convert.ToInt32(cmbListHesabGroup.EditValue))
                                //                item.HesabGroupId = _GroupId;
                                //            if (IsActiveBeforeEdit != chkIsActive.Checked)
                                //                item.IsActive = chkIsActive.Checked;
                                //        }
                                //    });
                                //}
                                ///////////////////////////////////////////متد اصلاح کد و نام در جدول رابطه بین کاربران و لیست سطح دسترسی به کدینگ حسابداری  WillCascadeOnUpdate////////////////////////////////////// 
                                //var q9 = db.RmsUserBepAccessLevelCodingHesabdaris.Where(s => s.HesabColId == RowId).ToList();
                                //if (q9.Count > 0)
                                //{
                                //    q9.ForEach(item =>
                                //    {
                                //        if (GroupIdBeforeEdit != Convert.ToInt32(cmbListHesabGroup.EditValue) || CodeBeforeEdit != txtCode.Text)
                                //            item.KeyId = Convert.ToInt32(item.KeyId.ToString().Substring(0, 2).Replace(item.KeyId.ToString().Substring(0, 2), _Code.ToString())
                                //            + item.KeyId.ToString().Substring(2));
                                //        if (GroupIdBeforeEdit != Convert.ToInt32(cmbListHesabGroup.EditValue))
                                //            item.HesabGroupId = _GroupId;
                                //        if (IsActiveBeforeEdit != chkIsActive.Checked)
                                //            item.IsActive = chkIsActive.Checked;
                                //    });
                                //}
                                ////////////////////////////////////////////////////////////////////////////////////////
                                //if (IsActiveBeforeEdit == false && chkIsActive.Checked == true)
                                //{
                                //    var m = db.EpHesabGroups.FirstOrDefault(p => p.Id == _GroupId);
                                //    var a1 = db.EpAccessLevelCodingHesabdaris.FirstOrDefault(p => p.HesabGroupId == _GroupId && p.HesabColId == 0);
                                //    //var a2 = db.EpAccessLevelCodingHesabdaris.FirstOrDefault(p => p.HesabGroupId == _GroupId && p.HesabColId == RowId && p.HesabMoinId == 0);
                                //    var b1 = db.RmsUserBepAccessLevelCodingHesabdaris.FirstOrDefault(p => p.HesabGroupId == _GroupId && p.HesabColId == 0);
                                //    //var b2 = db.RmsUserBepAccessLevelCodingHesabdaris.FirstOrDefault(p => p.HesabGroupId == _GroupId && p.HesabColId == RowId && p.HesabMoinId == 0);
                                //    if (m != null)
                                //        m.IsActive = true;
                                //    if (a1 != null)
                                //        a1.IsActive = true;
                                //    //if (a2 != null)
                                //    //    a2.IsActive = true;
                                //    if (b1 != null)
                                //        b1.IsActive = true;
                                //    //if (b2 != null)
                                //    //    b2.IsActive = true;
                                //}

                                db.SaveChanges();
                                    btnDisplyActiveList_Click(null, null);

                                //XtraMessageBox.Show("عملیات ویرایش با موفقیت انجام شد", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information); ;
                                if (gridViewMoshkhasat1.RowCount > 0)
                                    gridViewMoshkhasat1.FocusedRowHandle = EditRowIndex;
                                gridControlMoshkhasat1.Enabled = true;
                                ActiveButtons();
                                ClearControls();
                                InActiveControls();
                            }
                            else
                                XtraMessageBox.Show("رکورد جاری در بانک اطلاعاتی موجود نیست", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        catch (Exception ex)
                        {
                            XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message, "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                }
            }
        }

        private void btnCancel_M_Click(object sender, EventArgs e)
        {
            gridControlMoshkhasat1.Enabled = true;
            ActiveButtons();
            ClearControls();
            InActiveControls();
        }

        private void gridViewMoshkhasat1_DoubleClick(object sender, EventArgs e)
        {
            btnEdit_M_Click(null, null);
        }

        private void gridViewMoshkhasat1_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            btnDelete_M.Enabled = btnEdit_M.Enabled = gridViewMoshkhasat1.RowCount > 0 ? true : false;
        }

        private void cmbGroupTafzili_EditValueChanged(object sender, EventArgs e)
        {
            if (Convert.ToInt32(cmbGroupTafzili.EditValue) == 3)
            {

                using (var db = new MyContext())
                {
                    try
                    {
                        if (db.EpHesabTafziliAshkhass.Any())
                        {
                            if (IsActiveList == true)
                            {
                                db.EpHesabTafziliAshkhass.Where(s => s.IsActive == true && s.GroupTafziliId == 3).Load();
                                epHesabTafziliAshkhassBindingSource.DataSource = db.EpHesabTafziliAshkhass.Local.ToBindingList();
                            }
                            else
                            {
                                db.EpHesabTafziliAshkhass.Where(s => s.GroupTafziliId == 3).Load();
                                epHesabTafziliAshkhassBindingSource.DataSource = db.EpHesabTafziliAshkhass.Local.ToBindingList();
                            }
                            labelControl1.Text = "نام شخص حقیقی";
                        }
                    }
                    catch (Exception ex)
                    {
                        XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
                            "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
            else if (Convert.ToInt32(cmbGroupTafzili.EditValue) == 4)
            {
                using (var db = new MyContext())
                {
                    try
                    {
                        if (db.EpHesabTafziliAshkhass.Any())
                        {
                            if (IsActiveList == true)
                            {
                                db.EpHesabTafziliAshkhass.Where(s => s.IsActive == true && s.GroupTafziliId == 4).Load();
                                epHesabTafziliAshkhassBindingSource.DataSource = db.EpHesabTafziliAshkhass.Local.ToBindingList();
                            }
                            else
                            {
                                db.EpHesabTafziliAshkhass.Where(s => s.GroupTafziliId == 4).Load();
                                epHesabTafziliAshkhassBindingSource.DataSource = db.EpHesabTafziliAshkhass.Local.ToBindingList();
                            }
                            labelControl1.Text = "نام شخص حقوقی";
                        }
                    }
                    catch (Exception ex)
                    {
                        XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
                            "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
            txtGroupTafziliId.Text = cmbGroupTafzili.EditValue.ToString();
        }

        private void cmbTafziliAshkhas_EditValueChanged(object sender, EventArgs e)
        {
            txtId.Text = cmbTafziliAshkhas.EditValue.ToString();
            FillDataGridMoshakhasat1();
            btnCreate_M.Enabled = epMoshakhasat_AsBindingSource.DataSource==null ? true : false;
            btnCreate_A.Enabled = true;
            using (var db = new MyContext())
            {
                try
                {
                    if (db.EpHesabTafziliAshkhass.Any())
                    {
                        int AshkhasId = Convert.ToInt32(txtId.Text);
                        var q = db.EpHesabTafziliAshkhass.FirstOrDefault(s => s.Id == AshkhasId);
                        if(q!=null)
                        {
                            if (q.GroupTafziliId==3)
                            {
                                labelControl5.Text = "نام اختصار";
                                labelControl18.Text = "کد ملی";
                            }
                            else
                            {
                                labelControl5.Text = "نام مدیر عامل";
                                labelControl18.Text = "شناسه ملی";

                            }
                        }
                    
                    }
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
                        "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }

        }

    }
}