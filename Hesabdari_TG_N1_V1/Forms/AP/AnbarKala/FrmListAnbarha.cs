/****************************** Ghost.github.io ******************************\
*	Module Name:	AnbarsName.cs
*	Project:		Hesabdari_TG_N1_V1
*	Copyright (C) 2018 Kamal Khayati, All rights reserved.
*	This software may be modified and distributed under the terms of the MIT license.  See LICENSE file for details.
*
*	Written by Kamal Khayati <Kamal1355@gmail.com>,  2018 / 12 / 17   02:11 ب.ظ
*	
***********************************************************************************/
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraBars;
using DevExpress.XtraGrid;
using DevExpress.Data.Linq;
using Hesabdari_TG_N1_V1.Models;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraEditors;

namespace Hesabdari_TG_N1_V1.Forms.Ap.AnbarKala
{
    public partial class FrmListAnbarha : DevExpress.XtraEditors.XtraForm
    {

        public FrmListAnbarha()
        {
            InitializeComponent();
            //FillGridViewWhitInstantFeedbackSource();
            //FillGridViewWhitServerModeSource();
        }
        public void FillGridViewWhitServerModeSource()
        {
            // This line of code is generated by Data Source Configuration Wizard
            entityServerModeSource1.QueryableSource = new Hesabdari_TG_N1_V1.Models.MyContext().ApAnbars;
            gridControl1.DataSource = entityServerModeSource1;
        }
        public void FillGridViewWhitInstantFeedbackSource()
        {
            gridControl1.DataSource = null;
            // This line of code is generated by Data Source Configuration Wizard
            this.entityInstantFeedbackSource1.GetQueryable += entityInstantFeedbackSource1_GetQueryable;
            // This line of code is generated by Data Source Configuration Wizard
            this.entityInstantFeedbackSource1.DismissQueryable += entityInstantFeedbackSource1_DismissQueryable;
            gridControl1.DataSource = entityInstantFeedbackSource1;
        }

        private void gridView1_CustomUnboundColumnData(object sender, DevExpress.XtraGrid.Views.Base.CustomColumnDataEventArgs e)
        {
            HelpClass.HelpClass1.SetNumberRowsColumnUnboundGirdView(sender, e);
        }

        //This event is generated by Data Source Configuration Wizard
        void entityInstantFeedbackSource1_GetQueryable(object sender, GetQueryableEventArgs e)
        {
            // Instantiate a new DataContext
            Hesabdari_TG_N1_V1.Models.MyContext dataContext = new Hesabdari_TG_N1_V1.Models.MyContext();
            // Assign a queryable source to the EntityInstantFeedbackSource
            if (isActive == true)
                e.QueryableSource = dataContext.ApAnbars.Where(p => p.IsActive == true);
            else
                e.QueryableSource = dataContext.ApAnbars.Where(p => p.IsActive == false);
            // Assign the DataContext to the Tag property,
            // to dispose of it in the DismissQueryable event handler
            e.Tag = dataContext;
        }

        //This event is generated by Data Source Configuration Wizard
        void entityInstantFeedbackSource1_DismissQueryable(object sender, GetQueryableEventArgs e)
        {
            // Dispose of the DataContext
            ((Hesabdari_TG_N1_V1.Models.MyContext)e.Tag).Dispose();
        }

        //private void FrmListAnbarha_Activated(object sender, EventArgs e)
        //{
        //    //FillGridViewWhitInstantFeedbackSource();
        //    //FillGridViewWhitServerModeSource();
        //}


        //private void gridView1_CustomDrawRowIndicator(object sender, RowIndicatorCustomDrawEventArgs e)
        //{
        //    HelpClass.HelpClass1.CustomDrawRowIndicator(sender, e, gridView1);

        //}

        private void gridView1_DoubleClick(object sender, EventArgs e)
        {
            btnEdit_ItemClick(null, null);
        }

        private void btnSave_ItemClick(object sender, ItemClickEventArgs e)
        {
            FrmSedAnbarha fm = new FrmSedAnbarha(this);
            HelpClass.HelpClass1.FormSaveNewRecord(gridView1, fm);

        }
        bool isActive;
        private void btnDisplyListActive_ItemClick(object sender, ItemClickEventArgs e)
        {
            isActive = true;
            FillGridViewWhitInstantFeedbackSource();
            //FillGridViewWhitServerModeSource();

        }
        private void btnEdit_ItemClick(object sender, ItemClickEventArgs e)
        {
            if (gridView1.SelectedRowsCount > 0)
            {
                FrmSedAnbarha fm = new FrmSedAnbarha(this);
                fm.txtId.Text = gridView1.GetFocusedRowCellValue("ApAnbarId").ToString();
                fm.txtCode.Text = gridView1.GetFocusedRowCellValue("Code").ToString();
                fm.txtName.Text = gridView1.GetFocusedRowCellValue("Name").ToString();
                fm.chkIsActive.Checked = Convert.ToBoolean(gridView1.GetFocusedRowCellValue("IsActive"));
                HelpClass.HelpClass1.FormEditeCurrentRecord(gridView1, fm);
            }
        }

        private void btnPreviewPrint_ItemClick(object sender, ItemClickEventArgs e)
        {
            HelpClass.HelpClass1.ShowGridPreview(gridControl1, gridView1);
        }

        private void btnDisplyListNotActive_ItemClick(object sender, ItemClickEventArgs e)
        {
            isActive = false;
            FillGridViewWhitInstantFeedbackSource();
            //FillGridViewWhitServerModeSource();
        }

        private void btnDelete_ItemClick(object sender, ItemClickEventArgs e)
        {
            if (gridView1.SelectedRowsCount > 0)
            {
                FrmSedAnbarha fm = new FrmSedAnbarha(this);
                fm.txtId.Text = gridView1.GetFocusedRowCellValue("ApAnbarId").ToString();
                fm.txtCode.Text = gridView1.GetFocusedRowCellValue("Code").ToString();
                fm.txtName.Text = gridView1.GetFocusedRowCellValue("Name").ToString();
                fm.chkIsActive.Checked = Convert.ToBoolean(gridView1.GetFocusedRowCellValue("IsActive"));
                HelpClass.HelpClass1.FormDeleteCurrentRecord(gridView1, fm);
            }
        }

        private void btnPrintList_ItemClick(object sender, ItemClickEventArgs e)
        {
        }
    }
}