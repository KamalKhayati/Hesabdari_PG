/****************************** Ghost.github.io ******************************\
*	Module Name:	FrmMain.cs
*	Project:		Hesabdari_TG_N1_V1
*	Copyright (C) 2018 Kamal Khayati, All rights reserved.
*	This software may be modified and distributed under the terms of the MIT license.  See LICENSE file for details.
*
*	Written by Kamal Khayati <Kamal1355@gmail.com>,  2018 / 12 / 14   03:53 ق.ظ
*	
***********************************************************************************/
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraBars;
using DevExpress.XtraTabbedMdi;
using Hesabdari_TG_N1_V1.Forms.Ap;
using DevExpress.XtraBars.Docking2010.Views.NativeMdi;
using DevExpress.XtraBars.Docking2010.Views.Tabbed;
using DevExpress.XtraBars.InternalItems;
using DevExpress.XtraBars.Docking2010;
using DevExpress.XtraTab;
using Hesabdari_TG_N1_V1.Forms.Ap.AnbarKala;
using Microsoft.Win32;
using System.Data.SqlClient;
using HelpClassLibrary;
using SystemManagement.DafaterMali;
using SystemManagement.UsersSystem;
using DBHesabdari_TG;
using System.Data.Entity;
using DevExpress.XtraEditors;

namespace Hesabdari_TG_N1_V1.Forms
{
    public partial class FrmMain : DevExpress.XtraBars.Ribbon.RibbonForm
    {
        DocumentManager documentManager1;
        //XtraTabbedMdiManager xtraTabbedMdiManager1;
        public FrmMain()
        {
            InitializeComponent();
        }

        private void FrmMain_Load(object sender, EventArgs e)
        {

            // that will manage MDI child windows.
            //documentManager1.View = new NativeMdiView();
            ribbon.Minimized = true;
            //xtraTabbedMdiManager1 = new XtraTabbedMdiManager();
            //xtraTabbedMdiManager1.MdiParent = this;     
            documentManager1 = new DocumentManager
            {
                MdiParent = this,
                View = new TabbedView()
            };
            FillcmbMajmoehaList();


        }
        public void FillcmbMajmoehaList()
        {
            //var db = new MyContext();
            //db.MsMajmoes.Where(s => s.IsActive == true).LoadAsync().ContinueWith(loadTask =>
            //{
            //    // Bind data to control when loading complete
            //    msMajmoesBindingSource.DataSource = db.MsMajmoes.Local.ToBindingList();
            //}, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
            //using (var db = new MyContext())
            //{
            try
            {
                var db = new MyContext();
                if (db.MsMajmoes.Any())
                {
                    // This line of code is generated by Data Source Configuration Wizard
                    db.MsMajmoes.Where(s => s.MajmoeIsActive == true).LoadAsync().ContinueWith(loadTask =>
                    {
                        // Bind data to control when loading complete
                        msMajmoeBindingSource.DataSource = db.MsMajmoes.Local.ToBindingList();
                    }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
                    "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            //}

        }
        public void FillcmbVahedhaList()
        {
            using (var db = new MyContext())
            {
                try
                {
                    if (db.MsVaheds.Any())
                    {
                        int _MajmoeId = Convert.ToInt32(cmbMajmoehaList.EditValue);
                        // This line of code is generated by Data Source Configuration Wizard
                        db.MsVaheds.Where(s => s.VahedIsActive == true && s.MsMajmoeId == _MajmoeId).Load();
                        // Bind data to control when loading complete
                        msVahedBindingSource.DataSource = db.MsVaheds.Local.ToBindingList();
                    }
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
                        "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }

        }
        public void FillcmbShobehaList()
        {
            using (var db = new MyContext())
            {
                try
                {
                    if (db.MsVaheds.Any())
                    {
                        int _VahedId = Convert.ToInt32(cmbVahedhaList.EditValue);
                        // This line of code is generated by Data Source Configuration Wizard
                        db.MsShobes.Where(s => s.ShobeIsActive == true && s.MsVahedId == _VahedId).Load();
                        // Bind data to control when loading complete
                        msShobeBindingSource.DataSource = db.MsShobes.Local.ToBindingList();
                    }
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
                        "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }

        }
        public void FillcmbDoreMalihaList()
        {
            using (var db = new MyContext())
            {
                try
                {
                    if (db.MsDoreMalis.Any())
                    {
                        int _ShobeId = Convert.ToInt32(cmbShobehaList.EditValue);
                        // This line of code is generated by Data Source Configuration Wizard
                        db.MsDoreMalis.Where(s => s.DoreMaliIsActive == true && s.MsShobeId == _ShobeId).Load();
                        // Bind data to control when loading complete
                        msDoreMaliBindingSource.DataSource = db.MsDoreMalis.Local.ToBindingList();
                    }
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
                        "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }

        }


        private void btnListAnbarha_ItemClick(object sender, ItemClickEventArgs e)
        {
            FrmAnbarhaList fm = new FrmAnbarhaList();
            fm.lblSelectDoreMali.Text = cmbDoreMalihaList.EditValue != null ? cmbDoreMalihaList.EditValue.ToString() : "0";
            fm.MdiParent = this;
            HelpClass1.ActiveForm(fm);
        }

        private void btnListMojtamaha_ItemClick(object sender, ItemClickEventArgs e)
        {
            FrmMajmoehaList fm = new FrmMajmoehaList();
            fm.lblSelectDoreMali.Text = cmbDoreMalihaList.EditValue != null ? cmbDoreMalihaList.EditValue.ToString() : "0";
            fm.MdiParent = this;
            HelpClass1.ActiveForm(fm);
        }

        private void btnUsersList_ItemClick(object sender, ItemClickEventArgs e)
        {
            FrmUsersList fm = new FrmUsersList();
            fm.lblSelectDoreMali.Text = cmbDoreMalihaList.EditValue != null ? cmbDoreMalihaList.EditValue.ToString() : "0";
            fm.MdiParent = this;
            HelpClass1.ActiveForm(fm);
        }

        private void FrmMain_FormClosing(object sender, FormClosingEventArgs e)
        {
            SqlConnection.ClearAllPools();
            Dispose(true);
        }

        private void btnListVahedha_ItemClick(object sender, ItemClickEventArgs e)
        {
            FrmVahedhaList fm = new FrmVahedhaList();
            fm.lblSelectDoreMali.Text = cmbDoreMalihaList.EditValue != null ? cmbDoreMalihaList.EditValue.ToString() : "0";
            fm.MdiParent = this;
            HelpClass1.ActiveForm(fm);
        }

        private void btnListShoabat_ItemClick(object sender, ItemClickEventArgs e)
        {
            FrmShoabatList fm = new FrmShoabatList();
            fm.lblSelectDoreMali.Text = cmbDoreMalihaList.EditValue != null ? cmbDoreMalihaList.EditValue.ToString() : "0";
            fm.MdiParent = this;
            HelpClass1.ActiveForm(fm);
        }

        private void btnListDorehaiMali_ItemClick(object sender, ItemClickEventArgs e)
        {
            FrmDorehaList fm = new FrmDorehaList();
            fm.lblSelectDoreMali.Text = cmbDoreMalihaList.EditValue != null ? cmbDoreMalihaList.EditValue.ToString() : "0";
            fm.MdiParent = this;
            HelpClass1.ActiveForm(fm);
        }

        private void cmbMajmoehaList_EditValueChanged(object sender, EventArgs e)
        {
            FillcmbVahedhaList();
        }

        private void cmbVahedhaList_EditValueChanged(object sender, EventArgs e)
        {
            FillcmbShobehaList();
        }

        private void cmbShobehaList_EditValueChanged(object sender, EventArgs e)
        {
            FillcmbDoreMalihaList();
        }

        private void chkDefault_ItemClick(object sender, ItemClickEventArgs e)
        {
        }

        private void chkDefault_CheckedChanged(object sender, ItemClickEventArgs e)
        {
            cmbMajmoehaList.Enabled = cmbVahedhaList.Enabled = cmbShobehaList.Enabled = cmbDoreMalihaList.Enabled =
                                      chkDefault.Checked ? false : true;
        }
    }
}