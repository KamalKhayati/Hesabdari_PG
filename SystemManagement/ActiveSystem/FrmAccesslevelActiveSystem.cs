/****************************** Ghost.github.io ******************************\
*	Module Name:	FrmAccesslevelActiveSystem.cs
*	Project:		SystemManagement
*	Copyright (C) 2018 Kamal Khayati, All rights reserved.
*	This software may be modified and distributed under the terms of the MIT license.  See LICENSE file for details.
*
*	Written by Kamal Khayati <Kamal1355@gmail.com>,  2019 / 2 / 17   10:25 ب.ظ
*	
***********************************************************************************/
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using DBHesabdari_PG;
using System.Data.Entity;
using DevExpress.XtraTreeList;
using DBHesabdari_PG.Models.Ms.ActiveSystem;
using DBHesabdari_PG.Models.EP.CodingHesabdari;

namespace SystemManagement.ActiveSystem
{
    public partial class FrmAccesslevelActiveSystem : DevExpress.XtraEditors.XtraForm
    {
        public FrmAccesslevelActiveSystem()
        {
            InitializeComponent();
        }
        public void FillcmbActiveSystem()
        {
            using (var dbContext = new MyContext())
            {
                try
                {
                    // This line of code is generated by Data Source Configuration Wizard
                    dbContext.MsActiveSystems.Where(s => s.IsActive == true).Load();
                    // Bind data to control when loading complete
                    msActiveSystemBindingSource.DataSource = dbContext.MsActiveSystems.Local.ToBindingList();
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
                        "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }
        public void FilltreeListHesabMoin()
        {
            using (var dbContext = new MyContext())
            {
                try
                {
                    // This line of code is generated by Data Source Configuration Wizard
                    dbContext.EpHesabMoin1s.Where(s => s.IsActive == true).Load();
                    // Bind data to control when loading complete
                    epHesabMoinsBindingSource.DataSource = dbContext.EpHesabMoin1s.Local.ToBindingList();
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
                        "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void FrmAccesslevelActiveSystem_Load(object sender, EventArgs e)
        {
            FillcmbActiveSystem();
            FilltreeListHesabMoin();
        }

        private void cmbActiveSystem_EditValueChanged(object sender, EventArgs e)
        {
            using (var db = new MyContext())
            {
                try
                {
                    int _ActiveSystemId = Convert.ToInt32(cmbActiveSystem.EditValue);
                    var q2 = db.REpAllCodingHesabdariBMsActiveSystems.Where(f => f.ActiveSystemId == _ActiveSystemId).ToList();
                    //for (int i = tabPane1.Pages.Count - 1; i >= 0; i--)
                    //{
                    //    tabPane1.SelectedPageIndex = i;
                    //}
                    //treeListDafaterMali.CheckAll();
                    treeListHesabMoin.CheckAll();
                    if (q2.Count > 0)
                    {
                        q2.ForEach(item =>
                        {
                            var node2 = treeListHesabMoin.FindNodeByKeyID(item.AllCodingHesabdariId);
                            if (node2 != null)
                                treeListHesabMoin.SetNodeCheckState(node2, CheckState.Unchecked, false);
                        });
                    }
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
                        "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }

        }

        private void chkSelectAll_CheckedChanged(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            if (chkSelectAll.Checked)
                treeListHesabMoin.CheckAll();
            else
                treeListHesabMoin.UncheckAll();

        }

        private void chkOpenClose_CheckedChanged(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            if (chkOpenClose.Checked)
                treeListHesabMoin.ExpandAll();
            else
                treeListHesabMoin.CollapseAll();

        }

        private void btnPrintPreview_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            treeListHesabMoin.ShowRibbonPrintPreview();

        }

        private void btnSave_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            using (var db = new MyContext())
            {
                try
                {
                    int _ActiveSystemId = Convert.ToInt32(cmbActiveSystem.EditValue);
                    /////////////////////////// ذخیره سطح دسترسی سیستمهای فعال به حسابهای معین /////////////////////////////
                    var q = db.REpAllCodingHesabdariBMsActiveSystems.Where(s => s.ActiveSystemId == _ActiveSystemId).ToList();
                    if (q.Count > 0)
                    {
                        db.REpAllCodingHesabdariBMsActiveSystems.RemoveRange(q);
                    }

                    foreach (var item in treeListHesabMoin.GetNodeList().Except(treeListHesabMoin.GetAllCheckedNodes()))
                    {
                        if (item.CheckState == CheckState.Unchecked)
                        {
                            R_EpAllCodingHesabdari_B_MsActiveSystem obj1 = new R_EpAllCodingHesabdari_B_MsActiveSystem();
                            obj1.ActiveSystemId = _ActiveSystemId;
                            obj1.AllCodingHesabdariId = Convert.ToInt32(item.GetValue(colId));

                            db.REpAllCodingHesabdariBMsActiveSystems.Add(obj1);
                        }
                    }
                    //////////////////////////////////////////////////////////////////////////////////////////////////
                    db.SaveChanges();
                    XtraMessageBox.Show("عملیات باموفقیت انجام شد", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
                        "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }

        }

    }
}