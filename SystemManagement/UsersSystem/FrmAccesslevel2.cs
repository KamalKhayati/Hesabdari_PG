/****************************** Ghost.github.io ******************************\
*	Module Name:	FrmAccesslevel2.cs
*	Project:		SystemManagement
*	Copyright (C) 2018 Kamal Khayati, All rights reserved.
*	This software may be modified and distributed under the terms of the MIT license.  See LICENSE file for details.
*
*	Written by Kamal Khayati <Kamal1355@gmail.com>,  2019 / 1 / 20   10:46 AM
*	
***********************************************************************************/
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using System.Data.Entity;
using DBHesabdari_TG;
using DevExpress.XtraEditors.Popup;

namespace SystemManagement.UsersSystem
{
    public partial class FrmAccesslevel2 : DevExpress.XtraEditors.XtraForm
    {
        public FrmAccesslevel2()
        {
            InitializeComponent();
            FillcmbUsersList();
            FillchkListMajmoeha();
            FillchkListVahedha();
            FillchkListShobeha();
            FillchkListDorehaiMali();
        }
        public void FillcmbUsersList()
        {
            using (var dbContext = new MyContext())
            {
                try
                {
                    if (dbContext.MsUsers.Any())
                    {
                        // Call the Load method to get the data for the given DbSet from the database.
                        dbContext.MsUsers.Where(s => s.UserIsActive == true &&  s.UserCode != 101).Load();
                        // This line of code is generated by Data Source Configuration Wizard
                        msUserBindingSource.DataSource = dbContext.MsUsers.Local.ToBindingList();
                        
                    }
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
                        "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }
        public void FillchkListMajmoeha()
        {
            using (var dbContext = new MyContext())
            {
                try
                {
                    if (dbContext.MsMajmoes.Any())
                    {
                    // Call the Load method to get the data for the given DbSet from the database.
                    dbContext.MsMajmoes.Where(s=>s.MajmoeIsActive==true).Load();
                    // This line of code is generated by Data Source Configuration Wizard
                    msMajmoesBindingSource.DataSource = dbContext.MsMajmoes.Local.ToBindingList();
                    }
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
                        "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }
        public void FillchkListVahedha()
        {
            using (var dbContext = new MyContext())
            {
                try
                {
                    if (dbContext.MsVaheds.Any())
                    {
                        {
                            // Call the Load method to get the data for the given DbSet from the database.
                            dbContext.MsVaheds.Where(s => s.VahedIsActive == true).Load();
                            // This line of code is generated by Data Source Configuration Wizard
                            msVahedsBindingSource.DataSource = dbContext.MsVaheds.Local.ToBindingList();
                        }
                    }
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
                        "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }

        }
        public void FillchkListShobeha()
        {
            using (var dbContext = new MyContext())
            {
                try
                {
                    if (dbContext.MsShobes.Any())
                    {
                        // Call the Load method to get the data for the given DbSet from the database.
                        dbContext.MsShobes.Where(s => s.ShobeIsActive == true ).Load();
                        // This line of code is generated by Data Source Configuration Wizard
                        msShobesBindingSource.DataSource = dbContext.MsShobes.Local.ToBindingList();
                    }
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
                        "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }

        }
        public void FillchkListDorehaiMali()
        {
            using (var dbContext = new MyContext())
            {
                try
                {
                    if (dbContext.MsDoreMalis.Any())
                    {
                        // Call the Load method to get the data for the given DbSet from the database.
                        dbContext.MsDoreMalis.Where(s => s.DoreMaliIsActive == true ).Load();
                        // This line of code is generated by Data Source Configuration Wizard
                        msDoreMalisBindingSource.DataSource = dbContext.MsDoreMalis.Local.ToBindingList();
                    }
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
                        "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }

        }
        private void FrmAccesslevel2_Load(object sender, EventArgs e)
        {
            chkListMajmoeha.CheckAll();
            chkListVahedha.CheckAll();
            chkListShobeha.CheckAll();
            chkListDorehaiMali.CheckAll();
        }
        private void btnEdit_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            if (cmbUsersList.EditValue == null)
            {
                XtraMessageBox.Show("لطفا نام کاربر مورد نظر را انتخاب کنید", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
            else
            {
                using (var db = new MyContext())
                {
                    try
                    {
                        int _UserId = Convert.ToInt32(cmbUsersList.EditValue);
                        /////////////////////////// ویرایش سطح دسترسی کاربران به لیست مجموعه ها /////////////////////////////
                        var q = db.RmsUserhaBmsMajmoehas.Where(s => s.MsUserId == _UserId).ToList();
                        if (q.Count > 0)
                        {
                            db.RmsUserhaBmsMajmoehas.RemoveRange(q);
                        }

                        for (int i = 0; i < chkListMajmoeha.ItemCount; i++)
                        {

                            if (chkListMajmoeha.GetItemCheckState(i) == CheckState.Unchecked)
                            {
                                RmsUserhaBmsMajmoeha obj1 = new RmsUserhaBmsMajmoeha();
                                obj1.MsUserId = _UserId;
                                obj1.UserName = cmbUsersList.Edit.GetDisplayText(cmbUsersList.EditValue);
                                obj1.MsMajmoeId = Convert.ToInt32(chkListMajmoeha.GetItemValue(i)) ;
                                obj1.MajmoeName = chkListMajmoeha.GetItemText(i);
                                db.RmsUserhaBmsMajmoehas.Add(obj1);
                            }
                        }
                        /////////////////////////// ویرایش سطح دسترسی کاربران به لیست واحدها /////////////////////////////
                        var q1 = db.RmsUserhaBmsVahedhas.Where(s => s.MsUserId == _UserId).ToList();
                        if (q.Count > 0)
                        {
                            db.RmsUserhaBmsVahedhas.RemoveRange(q1);
                        }

                        for (int i = 0; i < chkListVahedha.ItemCount; i++)
                        {

                            if (chkListVahedha.GetItemCheckState(i) == CheckState.Unchecked)
                            {
                                RmsUserhaBmsVahedha obj1 = new RmsUserhaBmsVahedha();
                                obj1.MsUserId = _UserId;
                                obj1.UserName = cmbUsersList.Edit.GetDisplayText(cmbUsersList.EditValue);
                                obj1.MsVahedId = Convert.ToInt32(chkListVahedha.GetItemValue(i));
                                obj1.VahedName = chkListVahedha.GetItemText(i);
                                db.RmsUserhaBmsVahedhas.Add(obj1);
                            }
                        }
                        /////////////////////////// ویرایش سطح دسترسی کاربران به لیست شعبه ها /////////////////////////////
                        var q2 = db.RmsUserhaBmsShobehas.Where(s => s.MsUserId == _UserId).ToList();
                        if (q.Count > 0)
                        {
                            db.RmsUserhaBmsShobehas.RemoveRange(q2);
                        }

                        for (int i = 0; i < chkListShobeha.ItemCount; i++)
                        {

                            if (chkListShobeha.GetItemCheckState(i) == CheckState.Unchecked)
                            {
                                RmsUserhaBmsShobeha obj1 = new RmsUserhaBmsShobeha();
                                obj1.MsUserId = _UserId;
                                obj1.UserName = cmbUsersList.Edit.GetDisplayText(cmbUsersList.EditValue);
                                obj1.MsShobeId = Convert.ToInt32(chkListShobeha.GetItemValue(i));
                                obj1.ShobeName = chkListShobeha.GetItemText(i);
                                db.RmsUserhaBmsShobehas.Add(obj1);
                            }
                        }
                        /////////////////////////// ویرایش سطح دسترسی کاربران به لیست دوره های مالی /////////////////////////////
                        var q3 = db.RmsUserhaBmsDorehaiMalis.Where(s => s.MsUserId == _UserId).ToList();
                        if (q.Count > 0)
                        {
                            db.RmsUserhaBmsDorehaiMalis.RemoveRange(q3);
                        }

                        for (int i = 0; i < chkListDorehaiMali.ItemCount; i++)
                        {

                            if (chkListDorehaiMali.GetItemCheckState(i) == CheckState.Unchecked)
                            {
                                RmsUserhaBmsDorehaiMali obj1 = new RmsUserhaBmsDorehaiMali();
                                obj1.MsUserId = _UserId;
                                obj1.UserName = cmbUsersList.Edit.GetDisplayText(cmbUsersList.EditValue);
                                obj1.MsDoreMaliId = Convert.ToInt32(chkListDorehaiMali.GetItemValue(i));
                                obj1.DoreMali = Convert.ToInt32(chkListDorehaiMali.GetItemText(i));
                                db.RmsUserhaBmsDorehaiMalis.Add(obj1);
                            }
                        }
                        ////////////////////////////////////////////پایان///////////////////////////////////////////////////////
                        db.SaveChanges();
                        XtraMessageBox.Show("عملیات باموفقیت انجام شد", "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    catch (Exception ex)
                    {
                        XtraMessageBox.Show("عملیات با خطا مواجه شد" + "\n" + ex.Message,
                            "پیغام", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }

            }
        }

        private void chkAllMajmoeha_CheckedChanged(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            if (chkAllMajmoeha.Checked)
                chkListMajmoeha.UnCheckAll();
            else
                chkListMajmoeha.CheckAll();
        }

        private void chkAllVahedha_CheckedChanged(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            if (chkAllVahedha.Checked)
                chkListVahedha.UnCheckAll();
            else
                chkListVahedha.CheckAll();
        }

        private void chkAllShobeha_CheckedChanged(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            if (chkAllShobeha.Checked)
                chkListShobeha.UnCheckAll();
            else
                chkListShobeha.CheckAll();
        }

        private void chkAllDoreha_CheckedChanged(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            if (chkAllDoreha.Checked)
                chkListDorehaiMali.UnCheckAll();
            else
                chkListDorehaiMali.CheckAll();
        }

        private void cmbUsersList_EditValueChanged(object sender, EventArgs e)
        {
            chkListMajmoeha.CheckAll();
            chkListVahedha.CheckAll();
            chkListShobeha.CheckAll();
            chkListDorehaiMali.CheckAll();
        }
    }
}